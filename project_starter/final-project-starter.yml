Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  AmiId:
    Description: Amazon Machine Image in use
    Type: String
  InstanceType:
    Description: Type of the EC2 instance
    Type: String
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: # VPC ID in which you are creating the Security Group.
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      # The security group below with ingress/egress rules allowing traffic on port 80 using TCP protocol from/to any location:
      SecurityGroupIngress: #inbound traffic, inbound rules associated with the security group.
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 #allow traffic from anywhere
      SecurityGroupEgress: #outbound traffic, outbound rules associated with the security group.
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp #opening an ssh port to connect to a linux server to be able to throubleshoot, manage or install software, e.g. look at a log file
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html        
          echo "WellDone ! Udacity Demo Web Server Up and Running!" > index.html
      ImageId: !Sub ${AmiId}
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: !Sub ${InstanceType} # Amazon nomenclature for a specific machine which is how much RAM and which CPU
      # Specifying here that we need 10 GB hard drive for this machine and one drive is enough
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk" # where do I put the hard drive, mount point where you can create folders
          Ebs:
            VolumeSize: "10" # how much Hard-drive space this machine going to need

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "4"
      MaxSize: "4"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80" # could be 443 for Secure HTTP, for secure http you need a security certificate or SSL certificate
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward # forward requests to the specified target group
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 10
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:
  LoadBalancerURL:
    Description: URL for LoadBalancer
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
